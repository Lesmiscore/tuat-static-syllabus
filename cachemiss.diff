diff --git a/src/scraper.mjs b/src/scraper.mjs
index e64bd55..f756501 100644
--- a/src/scraper.mjs
+++ b/src/scraper.mjs
@@ -9,11 +9,20 @@ const browser = await puppeteer.launch({
 });
 const page = await browser.newPage();
 
-page.on("requestfailed", async (request) => {
-  console.log(`url: ${request.url()}, errText: ${request.failure().errorText}, method: ${request.method()}`);
-  if ("net::ERR_CACHE_MISS" === request.failure().errorText) {
-    await page.reload();
+let interrupt = undefined;
+async function waitInterrupt() {
+  try {
+    if (!interrupt)
+      await sleep(10);
+    await interrupt;
+  } finally {
+    interrupt = undefined;
   }
+}
+
+page.on("requestfailed", (request) => {
+  console.log(`url: ${request.url()}, errText: ${request.failure().errorText}, method: ${request.method()}`);
+  interrupt = page.reload();
 });
 
 function attr(ee, name) {
@@ -46,30 +55,35 @@ async function findDropdowns() {
   return dropDowns;
 }
 
-function waitNav() {
-  return page.waitForNavigation();
+async function waitNav() {
+  await waitInterrupt();
+  return await page.waitForNavigation();
 }
 
 async function click(tagId, wait = false) {
+  await waitInterrupt();
   // clicks button
   await page.click(`input[name=${tagId}]`);
   if (wait) await waitNav();
 }
 
 async function dropdown(tagId, value, wait = false) {
+  await waitInterrupt();
   // only use when page refreshes if changed, else not needed
   await page.select(`select[name=${tagId}]`, value);
   if (wait) await waitNav();
 }
 
 async function typeInput(tagId, value, wait = false) {
+  await waitInterrupt();
   await page.type(`input[name=${tagId}]`, value);
   if (wait) await waitNav();
 }
 
-function init() {
+async function init() {
+  await waitInterrupt();
   console.log("Wiping all states");
-  return page.goto("https://spica.gakumu.tuat.ac.jp/Syllabus/SearchMain.aspx");
+  return await page.goto("https://spica.gakumu.tuat.ac.jp/Syllabus/SearchMain.aspx");
 }
 
 function sleep(ms) {
@@ -99,17 +113,20 @@ try {
         let itemsInPage = await page.$$("input[type=submit][value=詳細]");
         const totalInPage = itemsInPage.length;
         for (let i = 0; i < totalInPage; i++) {
+          console.log(`Clicking row ${i}`);
+          await waitInterrupt();
           await itemsInPage[i].click();
 
           // scrape the page and put it into database
-          console.log(`Clicking row ${i}`);
           await sleep(1000);
 
           // we're allowed to go back by browser's Back button!
+          await waitInterrupt();
           await page.goBack();
           // grab handle again...
           // eslint-disable-next-line no-constant-condition
           while (true) {
+            await waitInterrupt();
             itemsInPage = await page.$$("input[type=submit][value=詳細]");
             if (itemsInPage.length === totalInPage) break;
 
@@ -118,6 +135,7 @@ try {
           }
         }
 
+        await waitInterrupt();
         const pager = await page.$$("tr[align=center]:not([style]) a");
         // get maximum number of pages
         for (const pageElem of [...pager].reverse()) {
